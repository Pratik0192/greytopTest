generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  password         String
  name             String
  email            String   @unique
  role             Role     @default(CLIENT)
  apiKey           String   @unique
  status           Status   @default(active)
  providersAllowed String[]
  whitelistedIps   String[]
  createdAt        DateTime @default(now())

  totalBill Decimal @default(0.00) @db.Decimal(18, 2)

  providerProfits ProviderProfit[]
  clientMembers   ClientMember[]
  monthlybill MonthlyBill[]
}

model MonthlyBill {
  id        Int      @id @default(autoincrement())
  userId    String
  month     Int
  year      Int
  totalProfit Decimal @default(0.00) @db.Decimal(18, 2)
  totalLoss   Decimal @default(0.00) @db.Decimal(18, 2)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  providers  MonthlyBillProvider[]

  @@unique([userId, month, year])
}

model MonthlyBillProvider {
  id             Int      @id @default(autoincrement())
  monthlyBillId  Int
  providerCode   String
  profit         Decimal @default(0.00) @db.Decimal(18, 2)
  loss           Decimal @default(0.00) @db.Decimal(18, 2)

  monthlyBill MonthlyBill @relation(fields: [monthlyBillId], references: [id], onDelete: Cascade)
}

model ProviderProfit {
  id           Int     @id @default(autoincrement())
  providerCode String
  profit       Decimal @db.Decimal(18, 2)
  loss         Decimal @default(0.00) @db.Decimal(18, 2)
  bill         Decimal @default(0.00) @db.Decimal(18, 2)
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerCode, userId])
}

model ClientMember {
  id            Int      @id @default(autoincrement())
  userId        String
  memberAccount String
  createdAt     DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSessions GameSession[]

  @@unique([userId, memberAccount])
  @@index([userId])
}

model GameSession {
  id             Int      @id @default(autoincrement())
  clientMemberId Int
  gameUid        String
  creditAmount   String
  currencyCode   String
  language       String
  homeUrl        String
  platform       Int
  callbackUrl    String
  timestamp      BigInt
  providerCode   String   @default("UNKNOWN_CODE")
  createdAt      DateTime @default(now())

  clientMember ClientMember  @relation(fields: [clientMemberId], references: [id], onDelete: Cascade)
  gameHistory  GameHistory[]

  @@index([clientMemberId])
  @@index([gameUid])
}

model GameHistory {
  id           Int     @id @default(autoincrement())
  serialNumber String  @unique
  gameUid      String  @default("UNKNOWN_UID")
  gameRound    String  @default("ROUND_0")
  betAmount    Decimal @default(0.00) @db.Decimal(18, 2)
  winAmount    Decimal @default(0.00) @db.Decimal(18, 2)

  profit Decimal @default(0.00) @db.Decimal(18, 2)
  loss   Decimal @default(0.00) @db.Decimal(18, 2)

  memberAccount String
  currencyCode  String
  callbackTime  DateTime
  createdAt     DateTime @default(now())

  gameSessionId Int?
  gameSession   GameSession? @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@index([gameUid])
  @@index([memberAccount])
}

model GameProvider {
  id         String   @id @db.Char(3)
  name       String   @unique
  ggrPercent Int      @default(0)
  createdAt  DateTime @default(now())
  games      Game[]
}

model Game {
  id             String       @id @db.Char(5)
  name           String       @default("Unnamed Game")
  gameUid        String       @default("UNKNOWN_UID")
  types          String       @default("Unknown")
  gameProvider   GameProvider @relation(fields: [gameProviderId], references: [id])
  gameProviderId String       @default("DEF") @db.Char(3)
}

enum Role {
  ADMIN
  CLIENT
}

enum Status {
  active
  inactive
}
